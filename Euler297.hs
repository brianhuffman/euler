module Euler297 where
import EulerLib

{-

Problem 297
18 June 2010

Each new term in the Fibonacci sequence is generated by adding the
previous two terms.

Starting with 1 and 2, the first 10 terms will be: 1, 2, 3, 5, 8, 13,
21, 34, 55, 89.

Every positive integer can be uniquely written as a sum of
nonconsecutive terms of the Fibonacci sequence. For example, 100 = 3 +
8 + 89. Such a sum is called the Zeckendorf representation of the
number.

For any integer n>0, let z(n) be the number of terms in the Zeckendorf
representation of n.

Thus, z(5) = 1, z(14) = 2, z(100) = 3 etc.
Also, for 0<n<10^6, ∑ z(n) = 7894453.

Find ∑ z(n) for 0<n<10^17.

-}


{-

Starting with 1 and 2, the first 10 terms will be: 1, 2, 3, 5, 8, 13,
21, 34, 55, 89.

               1 2 3 5 8
n  | 1 2 3 5 8 3 1 4 5 9
------------------------
0  | - - - - - - - - - -
1  | x - - - - - - - - -
2  | - x - - - - - - - -
3  | - - x - - - - - - -
4  | x - x - - - - - - -
5  | - - - x - - - - - -
6  | x - - x - - - - - -
7  | - x - x - - - - - -
8  | - - - - x - - - - -
9  | x - - - x - - - - -
10 | - x - - x - - - - -
11 | - - x - x - - - - -
12 | x - x - x - - - - -
13 | - - - - - x - - - -
14 | x - - - - x - - - - 
15 | - x - - - x - - - -
16 | - - x - - x - - - -
17 | x - x - - x - - - -
18 | - - - x - x - - - -
19 | x - - x - x - - - -
20 | - x - x - x - - - -
21 | - - - - - - x - - -
22 | x - - - - - x - - -
23 | - x - - - - x - - -
24 | - - x - - - x - - -
25 | x - x - - - x - - -
26 | - - - x - - x - - -
27 | x - - x - - x - - -
28 | - x - x - - x - - -
29 | - - - - x - x - - -
30 | x - - - x - x - - -
31 | - x - - x - x - - -
32 | - - x - x - x - - -
33 | x - x - x - x - - -
34 | - - - - - - - x - -

-}

largest_fib_below :: Integer -> Integer
largest_fib_below n = last (takeWhile (<n) fibs)

prob297_slow :: Integer -> Integer
prob297_slow 1 = 0
prob297_slow n = prob297_slow a + prob297_slow b + b
  where
    a = largest_fib_below n
    b = n - a

zfibs :: [(Integer, Integer)]
zfibs = (0, 0) : (1, 0) : zipWith f zfibs (tail zfibs)
  where
    f (a, x) (b, y) = (a+b, a+x+y)

largest_zfib_below :: Integer -> (Integer, Integer)
largest_zfib_below n = last (takeWhile (\(a, x) -> a < n) zfibs)

prob297 :: Integer -> Integer
prob297 1 = 0
prob297 n = x + prob297 b + b
  where
    (a, x) = largest_zfib_below n
    b = n - a

main :: IO String
main = return $ show (prob297 (10^17))

answer :: String
answer = "2252639041804718029"
